class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p == NULL && q == NULL)
            return true;
        if(p == NULL || q == NULL || p->val != q->val)
            return false;
        return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);
    }
};

//recursion solution 

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p == NULL && q == NULL)
            return true;
        else if(p == NULL && q != NULL)
            return false;
        else if(p != NULL && q == NULL)
            return false;
        else{
            bool l = isSameTree(p->left,q->left);
            bool r = isSameTree(p->right,q->right);
            return (p->val == q->val) && l && r;
        }
    }
};

//iterative solution

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        stack<pair<TreeNode*,TreeNode*>> st;
        st.push({p,q});
        while(!st.empty()){
            auto [node1,node2] = st.top();
            st.pop();
            if(!node1 && !node2) continue;
            if(!node1 || !node2 || node1->val != node2->val) return false;
            st.push({node1->left,node2->left});
            st.push({node1->right,node2->right});
        }
        return true;
    }
};